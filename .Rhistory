s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
} else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
else if (Xn1[i] == 3) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3])  # Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[4,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
# Tracé de la trajectoire de l'état de la parcelle de fleurs (Xn1) par rapport au temps
plot(1:N, Xn1, type = "l", ylim = c(1, 4), xlab = "Temps", ylab = "État de la parcelle de fleurs",  col = "blue")
# Ajout de la trajectoire du stock de graines (s) à la même figure
lines(1:N, s, type = "l", col = "red")
# Légende
legend("topright", legend = c("État de la parcelle de fleurs", "Stock de graines"), col = c("blue", "red"), lty = 1)
mtext("quelques trajectoires du MDP sous la politique 1",
side=3,line=-1.2,outer=TRUE)
}
# Nombre de simulations
n <- 1000
# Vecteur pour stocker les résultats de chaque simulation
monte_carlo_results <- rep(0, n)
# Boucle pour exécuter les simulations
for (simu in 1:n) {
# Initialisation de Xn1
Xn1 <- rep(1, N)
c <- rep(0, N)
# Boucle pour simuler les trajectoires sous la politique pi1
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
c[i] <- 0
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
} else if (Xn1[i] == 3) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3])  # Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
c[i] <- 1
} else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1]) # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
c[i] <- 0
} else if (Xn1[i] == 4) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[4,,1])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
}
# Calcul du coût total de la trajectoire et stockage dans le vecteur
monte_carlo_results[simu] <- sum(c)
}
# Calcul de la moyenne des coûts sur toutes les simulations
mean_cost_pi1 <- mean(monte_carlo_results)
# Affichage du coût moyen
mean_cost_pi1
Xn1 <- rep(1, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
par(mfrow=c(1, 3))
for (traj in 1:3){
Xn1 <- rep(1, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
# Tracé de la trajectoire de l'état de la parcelle de fleurs (Xn1) par rapport au temps
plot(1:N, Xn1, type = "l", ylim = c(1, 4), xlab = "Temps", ylab = "État de la parcelle de fleurs",  col = "blue")
# Ajout de la trajectoire du stock de graines (s) à la même figure
lines(1:N, s, type = "l", col = "red")
# Légende
legend("topright", legend = c("État de la parcelle de fleurs", "Stock de graines"), col = c("blue", "red"), lty = 1)
mtext("quelques trajectoires du MDP sous la politique 2",
side=3,line=-1.2,outer=TRUE)
}
# Nombre de simulations
n <- 1000
# Vecteur pour stocker les résultats de chaque simulation
monte_carlo_results <- rep(0, n)
# Boucle pour exécuter les simulations
for (simu in 1:n) {
# Initialisation de Xn1
Xn1 <- rep(1, N)
c <- rep(0, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
c[i] <- 0
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2, ,1])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
c[i] <- 1
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
}
# Calcul du coût total de la trajectoire et stockage dans le vecteur
monte_carlo_results[simu] <- sum(c)
}
# Calcul de la moyenne des coûts sur toutes les simulations
mean_cost_pi1 <- mean(monte_carlo_results)
# Affichage du coût moyen
mean_cost_pi1
library(usethis)
install.packages("usethis")
library(usethis)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("roxygen2")
library(roxygen2)
library(usethis)
create_package("C:/Users/hp/Picross/picrosspkg")
setwd("C:/Users/hp/Picross")
library(devtools)
library(usethis)
library(devtools)
library(roxygen2)
library(roxygen2)
devtools::build()
install.packages("/chemin/vers/votre/package.tar.gz", repos = NULL, type = "source")
Sys.which("make")
Sys.getenv("RTOOLS40_HOME")
R.version
R.version
library(roxygen2)
library(usethis)
library(usethis)
shiny::runApp('R')
install.packages("shiny")
sessionInfo()
library(shiny)
runApp('R')
install.packages("roxygen2")
roxygen2::roxygenize()
help(app)
?shinyapp
roxygen2::roxygenize()
help("generer_grille_aleatoire")
runApp('R')
devtools::build()
install.packages("C:/Users/hp/Picross_0.1.0.tar.gz", repos = NULL, type = "source")
roxygen2::roxygenize()
warnings()
roxygen2::roxygenize()
warnings()
roxygen2::roxygenize()
roxygen2::roxygenize()
packageVersion("roxygen2")#' Jeu de Picross Shiny
#' Cet ensemble de fonctions et d'interface Shiny permet de jouer au jeu de Picross.
#'
#'
#' UI pour le jeu de Picross
#'
#' Cette fonction définit l'interface utilisateur (UI) pour le jeu de Picross en utilisant Shiny.
#'
#' @export
ui <- fluidPage(
titlePanel("Picross Game"),
selectInput("gridSize", "Taille de la Grille",
choices = c(5, 6, 7, 8, 9, 10),
selected = 5),
selectInput("difficultyLevel", "Niveau de difficulté",
choices = c("Facile", "Moyen", "Difficile"),
selected = "Facile"),
actionButton("generateButton", "Générer une nouvelle grille"),
actionButton("checkSolutionButton", "Vérifier la solution"),
fluidRow(
column(3, align = "center",
uiOutput("rowIndicesTable")
),
column(6, align = "center",
uiOutput("picrossGrid")
),
column(3, align = "center",
uiOutput("columnIndicesTable")
)
),
# Add CSS and JavaScript code...
tags$head(
tags$style(HTML("
.square-button {
width: 30px;
height: 30px;
margin: 0px;
font-size: 12px; /* Adjusted font size for better visibility */
}
.grid-container {
display: grid;
grid-template-columns: auto 2fr auto;
grid-template-rows: auto;
gap: 10px;
}
.row-indices {
grid-column: 1 / span 1;
grid-row: 1 / span 1;
}
.grid {
grid-column: 2 / span 1;
grid-row: 1 / span 1;
}
.column-indices {
grid-column: 3 / span 1;
grid-row: 1 / span 1;
}
.black-cell {
background-color: black !important;
}
.cross-cell {
color: red;
font-size: 18px;
line-height: 30px;
}
")),
tags$script(HTML('
$(document).on("click", ".cell-button", function() {
if ($(this).hasClass("row-indices") || $(this).hasClass("column-indices")) {
return;  // Ignore clicks on row and column indices
}
var cellId = $(this).attr("id");
var cellValue = parseInt($(this).val());
if ($(this).hasClass("black-cell")) {
$(this).removeClass("black-cell").addClass("cross-cell").val(""); // Change to cross-cell and remove value
} else if ($(this).hasClass("cross-cell")) {
$(this).removeClass("cross-cell").val(""); // Clear cross and value
} else {
$(this).addClass("black-cell").val(1); // Toggle black cell and set value to 1
}
});
'))
)
)
#' Logique serveur pour le jeu de Picross
#'
#' Cette fonction définit la logique serveur pour le jeu de Picross en utilisant Shiny.
#'
#' @export
server <- function(input, output) {
picrossGridData <- reactiveVal(NULL)
userGrid <- reactiveVal(matrix(0, nrow = 5, ncol = 5))  # Initialisation de userGrid
observeEvent(input$generateButton, {
taille_grille <- as.numeric(input$gridSize)
niveau_difficulte <- input$difficultyLevel
# Déterminez la probabilité en fonction du niveau de difficulté
p <- if (niveau_difficulte == "Facile") {
0.3
} else if (niveau_difficulte == "Moyen") {
0.5
} else {                                   # Niveau de difficulté "Difficile"
print("Difficile")  # Vérifier si cette partie est atteinte
0.7
}
randomGrid <- generer_grille_aleatoire(taille_grille, p)
indices_lignes <- apply(randomGrid, 1, obtenir_indices_ligne)
indices_colonnes <- apply(randomGrid, 2, obtenir_indices_colonne)
picrossGridData(list(
picrossMatrix = randomGrid,
indicesLignes = indices_lignes,
indicesColonnes = indices_colonnes
))
print(randomGrid)
# Mettre à jour la taille de userGrid pour qu'elle corresponde à randomGrid
userGrid(matrix(0, nrow = taille_grille, ncol = taille_grille))
})
observeEvent(input$checkSolutionButton, {
picrossGridDataValue <- picrossGridData()
if (is.null(picrossGridDataValue)) {
showModal(modalDialog(
title = "Erreur",
"Veuillez générer une grille aléatoire avant de vérifier la solution."
))
return()
}
randomGrid <- picrossGridDataValue$picrossMatrix
comparison_result <- compare_matrices(userGrid(), randomGrid)
if (all(comparison_result)) {
showModal(modalDialog(
title = "Bravo !",
"Votre solution est correcte !"
))
} else {
showModal(modalDialog(
title = "Réessayer",
"Désolé, votre solution n'est pas correcte. Veuillez réessayer."
))
}
})
output$rowIndicesTable <- renderTable({
picrossGridDataValue <- picrossGridData()
if (is.null(picrossGridDataValue)) return(NULL)
t(sapply(picrossGridDataValue$indicesLignes, function(indices) {
paste(indices, collapse = " ")
}))
})
output$columnIndicesTable <- renderTable({
picrossGridDataValue <- picrossGridData()
if (is.null(picrossGridDataValue)) return(NULL)
t(sapply(picrossGridDataValue$indicesColonnes, function(indices) {
paste(indices, collapse = " ")
}))
})
output$picrossGrid <- renderUI({
picrossGridDataValue <- picrossGridData()
if (is.null(picrossGridDataValue)) return(NULL)
picrossGrid <- tagList(
lapply(1:input$gridSize, function(i) {
div(
class = "cell-container",
lapply(1:input$gridSize, function(j) {
actionButton(
inputId = paste0("cell", i, j),
label = "",
class = c("square-button", "cell-button"),
value = picrossGridDataValue$picrossMatrix[i, j],
onclick = paste("Shiny.setInputValue('selected_cell', {row: ", i, ", col: ", j, "});")
)
})
)
})
)
picrossGrid
})
observeEvent(input$selected_cell, {
selected_cell <- input$selected_cell
userGridValue <- userGrid()
userGridValue[selected_cell$row, selected_cell$col] <- 1
userGrid(userGridValue)
})
observe({
userGridValue <- userGrid()
print(userGridValue)  # Mettre à jour la matrice userGrid dans la console à chaque changement dans la grille de boutons
})
}
#' Lancer l'application Shiny
#'
#' Cette fonction lance l'application Shiny pour le jeu de Picross.
#'
#' @name shinyApp
#' @export
shinyApp(ui, server)
devtools::document()
rm(list = c("server"))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
play()
play()
play()
play()
play()
shiny::runApp('R')
#' Compare deux matrices
#'
#' Cette fonction compare deux matrices et retourne une matrice de comparaison.
#'
#' @param mat1 Première matrice à comparer
#' @param mat2 Deuxième matrice à comparer
#' @return Matrice de comparaison
#' @export
compare_matrices <- function(mat1, mat2) {
if (!identical(dim(mat1), dim(mat2))) {
stop("Les dimensions des matrices ne correspondent pas.")
}
rows <- nrow(mat1)
cols <- ncol(mat1)
comparison <- matrix(NA, nrow = rows, ncol = cols)
for (i in 1:rows) {
for (j in 1:cols) {
comparison[i, j] <- ifelse(mat1[i, j] == mat2[i, j], TRUE, FALSE)
}
}
return(comparison)
}
#' @importFrom stats rbinom
#'
#' @export
generer_grille_aleatoire <- function(taille, p) {
matrix(rbinom(taille^2, 1, p), nrow = taille)
}
#' Obtient les indices de colonne contigus
#'
#' Cette fonction obtient les indices des colonnes contigus dans une matrice.
#'
#' @param colonne Vecteur de la colonne à analyser
#' @return Indices des colonnes contigus
#' @export
obtenir_indices_colonne <- function(colonne) {
consecutive_ones <- rle(colonne)$lengths[rle(colonne)$values == 1]
if (length(consecutive_ones) == 0) {
return(NULL)
} else {
return(consecutive_ones)
}
}
#' Obtient les indices de ligne contigus
#'
#' Cette fonction obtient les indices des lignes contigus dans une matrice.
#'
#' @param ligne Vecteur de la ligne à analyser
#' @return Indices des lignes contigus
#' @export
obtenir_indices_ligne <- function(ligne) {
consecutive_ones <- rle(ligne)$lengths[rle(ligne)$values == 1]
if (length(consecutive_ones) == 0) {
return(NULL)
} else {
return(consecutive_ones)
}
}
runApp('R')
runApp('R')
play()
