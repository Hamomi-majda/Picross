mtext("quelques trajectoires du MDP sous la politique 1",
side=3,line=-1.2,outer=TRUE)
}
# Nombre de simulations
n <- 1000
# Vecteur pour stocker les résultats de chaque simulation
monte_carlo_results <- rep(0, n)
# Boucle pour exécuter les simulations
for (simu in 1:n) {
# Initialisation de Xn1
Xn1 <- rep(1, N)
c <- rep(0, N)
# Boucle pour simuler les trajectoires sous la politique pi1
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
c[i] <- 0
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
} else if (Xn1[i] == 3) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3])  # Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
c[i] <- 1
} else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1]) # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
c[i] <- 0
} else if (Xn1[i] == 4) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[4,,1])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
}
# Calcul du coût total de la trajectoire et stockage dans le vecteur
monte_carlo_results[simu] <- sum(c)
}
# Calcul de la moyenne des coûts sur toutes les simulations
mean_cost_pi1 <- mean(monte_carlo_results)
# Affichage du coût moyen
mean_cost_pi1
par(mfrow=c(1, 3))
for (traj in 1:3){
Xn1 <- rep(1, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
# Tracé de la trajectoire de l'état de la parcelle de fleurs (Xn1) par rapport au temps
plot(1:N, Xn1, type = "l", ylim = c(1, 4), xlab = "Temps", ylab = "État de la parcelle de fleurs",  col = "blue")
# Ajout de la trajectoire du stock de graines (s) à la même figure
lines(1:N, s, type = "l", col = "red")
# Légende
legend("topright", legend = c("État de la parcelle de fleurs", "Stock de graines"), col = c("blue", "red"), lty = 1)
mtext("quelques trajectoires du MDP sous la politique 2",
side=3,line=-1.2,outer=TRUE)
}
# Nombre de simulations
n <- 1000
# Vecteur pour stocker les résultats de chaque simulation
monte_carlo_results <- rep(0, n)
# Boucle pour exécuter les simulations
for (simu in 1:n) {
# Initialisation de Xn1
Xn1 <- rep(1, N)
c <- rep(0, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
c[i] <- 0
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2, ,1])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
c[i] <- 1
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
}
# Calcul du coût total de la trajectoire et stockage dans le vecteur
monte_carlo_results[simu] <- sum(c)
}
# Calcul de la moyenne des coûts sur toutes les simulations
mean_cost_pi1 <- mean(monte_carlo_results)
# Affichage du coût moyen
mean_cost_pi1
V = matrix(0,4,N+1)
V[, 1] = R
Maximiseurs = matrix (0 ,4 ,N)
poliOptimale = matrix (0 ,4 ,N)
for (n in 1:N){
for (x in 1:4){
tmp = r[x,]+V[,n]%*%Q[x,,]
Maximiseurs[x,n] = which.max(tmp)
poliOptimale[x, (N+1)-n] = which.max(tmp)
}
}
V = matrix(0,4,N+1)
V[, 1] = R
Maximiseurs = matrix (0 ,4 ,N)
poliOptimale = matrix (0 ,4 ,N)
for (n in 1:N){
for (x in 1:4){
tmp = r[x,]+V[,n]%*%Q[x,,]
Maximiseurs[x,n] = which.max(tmp)
poliOptimale[x, (N+1)-n] = which.max(tmp)
V[x,n+1] = max(tmp)
}
}
# Création d'une matrice pour les récompenses instantanées indépendante de stock
r <- matrix(c(
0, 0, NA, -2,
0, NA, NA, -2,
0, NA, 1, -2,
0, NA, 0, -2,
),
nrow = 4, byrow = TRUE)
# Création d'une matrice pour les récompenses instantanées indépendante de stock
r <- matrix(c(
0, 0, NA, -2,
0, NA, NA, -2,
0, NA, 1, -2,
0, NA, 0, -2
),
nrow = 4, byrow = TRUE)
# Création d'une matrice pour les récompenses instantanées indépendante de stock
r <- matrix(c(
0, 0, NA, -2,
0, NA, NA, -2,
0, NA, 1, -2,
0, NA, 0, -2
),
nrow = 4, byrow = TRUE)
r
# Création d'une matrice pour les récompenses instantanées indépendante de stock
r <- matrix(c(
0, 0, -Inf, -2,
0, -Inf, -Inf, -2,
0, -Inf, 1, -2,
0, -Inf, 0, -2
),
nrow = 4, byrow = TRUE)
r
V = matrix(0,4,N+1)
V[, 1] = R
Maximiseurs = matrix (0 ,4 ,N)
poliOptimale = matrix (0 ,4 ,N)
for (n in 1:N){
for (x in 1:4){
tmp = r[x,]+V[,n]%*%Q[x,,]
Maximiseurs[x,n] = which.max(tmp)
poliOptimale[x, (N+1)-n] = which.max(tmp)
V[x,n+1] = max(tmp)
}
}
V = matrix(0,4,N+1)
V[, 1] = R
Maximiseurs = matrix (0 ,4 ,N)
poliOptimale = matrix (0 ,4 ,N)
for (n in 1:N){
for (x in 1:4){
tmp = r[x,]+V[,n]%*%Q[x,,]
Maximiseurs[x,n] = which.max(tmp)
poliOptimale[x, (N+1)-n] = which.max(tmp)
V[x,n+1] = max(tmp)
}
}
V[x,n+1]
data.frame(Maximiseurs)
data.frame(poliOptimale)
# horizon
N <- 20
# Espace d'etat
y <- c(1, 2, 3, 4)
s <- rep(2, N)  # Initialisation du stock de graines à 2 pour chaque période
# Espace d'action
A <- c(1, 2, 3, 4)
# Matrices de transition pour chaque action
Q = array ( 0 , dim = c( 4 , 4 , 4 ) )
Q[,,1]= matrix(c(1,0,0,0,
0.1, 0.1,0.8, 0,
0.1,0,0,0.9,
0.9,0,0,0.1),nrow = 4, byrow = TRUE)
Q[,,2]= matrix(c(0,1,0,0,
1,0,0,0,
1,0,0,0,
1,0,0,0),nrow = 4, byrow = TRUE)
Q[,,3]= matrix(c(1,0,0,0,
1,0,0,0,
1,0,0,0,
1,0,0,0
),nrow = 4, byrow = TRUE)
Q[,,4]= matrix(c(1,0,0,0,
0.1, 0.1,0.8, 0,
0.1,0,0,0.9,
0.9,0,0,0.1),nrow = 4, byrow = TRUE)
#  Matrice récompense instantanée r
# Création d'une matrice pour les récompenses instantanées
r <- matrix(c(0, NA, NA, -2,
0, NA, NA, -2,
0, NA, 1, -2,
0, NA, 0, -2,
0, 0, NA, -2,
0, NA, NA, -2,
0, NA, 1, -2,
0, NA, 0, -2,
0, 0, NA, -2,
0, NA, NA, -2,
0, NA, 1, -2,
0, NA, 0, -2),
nrow = 12, byrow = TRUE)
# Initialisation de Xn1
Xn1 <- rep(1, N)
# Boucle pour simuler les trajectoires sous la politique pi1
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
} else if (Xn1[i] == 3) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3])  # Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[4, ,1])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
par(mfrow=c(1, 3))
for (traj in 1:3){
Xn1 <- rep(1, N)
# Boucle pour simuler les trajectoires sous la politique pi1
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
} else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
else if (Xn1[i] == 3) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3])  # Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[4,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
# Tracé de la trajectoire de l'état de la parcelle de fleurs (Xn1) par rapport au temps
plot(1:N, Xn1, type = "l", ylim = c(1, 4), xlab = "Temps", ylab = "État de la parcelle de fleurs",  col = "blue")
# Ajout de la trajectoire du stock de graines (s) à la même figure
lines(1:N, s, type = "l", col = "red")
# Légende
legend("topright", legend = c("État de la parcelle de fleurs", "Stock de graines"), col = c("blue", "red"), lty = 1)
mtext("quelques trajectoires du MDP sous la politique 1",
side=3,line=-1.2,outer=TRUE)
}
# Nombre de simulations
n <- 1000
# Vecteur pour stocker les résultats de chaque simulation
monte_carlo_results <- rep(0, n)
# Boucle pour exécuter les simulations
for (simu in 1:n) {
# Initialisation de Xn1
Xn1 <- rep(1, N)
c <- rep(0, N)
# Boucle pour simuler les trajectoires sous la politique pi1
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
c[i] <- 0
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
} else if (Xn1[i] == 3) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3])  # Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
c[i] <- 1
} else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1]) # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé après la récolte
c[i] <- 0
} else if (Xn1[i] == 4) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[4,,1])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
}
# Calcul du coût total de la trajectoire et stockage dans le vecteur
monte_carlo_results[simu] <- sum(c)
}
# Calcul de la moyenne des coûts sur toutes les simulations
mean_cost_pi1 <- mean(monte_carlo_results)
# Affichage du coût moyen
mean_cost_pi1
Xn1 <- rep(1, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
par(mfrow=c(1, 3))
for (traj in 1:3){
Xn1 <- rep(1, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,1 ])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
}
}
# Tracé de la trajectoire de l'état de la parcelle de fleurs (Xn1) par rapport au temps
plot(1:N, Xn1, type = "l", ylim = c(1, 4), xlab = "Temps", ylab = "État de la parcelle de fleurs",  col = "blue")
# Ajout de la trajectoire du stock de graines (s) à la même figure
lines(1:N, s, type = "l", col = "red")
# Légende
legend("topright", legend = c("État de la parcelle de fleurs", "Stock de graines"), col = c("blue", "red"), lty = 1)
mtext("quelques trajectoires du MDP sous la politique 2",
side=3,line=-1.2,outer=TRUE)
}
# Nombre de simulations
n <- 1000
# Vecteur pour stocker les résultats de chaque simulation
monte_carlo_results <- rep(0, n)
# Boucle pour exécuter les simulations
for (simu in 1:n) {
# Initialisation de Xn1
Xn1 <- rep(1, N)
c <- rep(0, N)
# Boucle pour simuler les trajectoires sous la politique pi2
for (i in 2:(N-1)) {
if (Xn1[i] == 1) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,2 ])  # Semer
s[i+1] <- s[i] - 1  # Diminuer le stock de graines après le semis
c[i] <- 0
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,4 ])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
}
else if (Xn1[i] == 2) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2, ,1])  # Ne rien faire
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
if (Xn1[i] == 3) {
if (s[i] > 0) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[1,,3 ])  #Récolter
s[i+1] <- s[i]   # Garder le stock de graines inchangé
c[i] <- 1
} else {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[3,, 4])  # Acheter des graines
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- -2
}
}
else if (Xn1[i] ==4 ) {
Xn1[i+1] <- sample(y, size = 1, replace = TRUE, prob = Q[2,,3 ])  #Récolter
s[i+1] <- s[i]  # Garder le stock de graines inchangé
c[i] <- 0
}
}
# Calcul du coût total de la trajectoire et stockage dans le vecteur
monte_carlo_results[simu] <- sum(c)
}
# Calcul de la moyenne des coûts sur toutes les simulations
mean_cost_pi1 <- mean(monte_carlo_results)
# Affichage du coût moyen
mean_cost_pi1
library(usethis)
install.packages("usethis")
library(usethis)
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("roxygen2")
library(roxygen2)
library(usethis)
create_package("C:/Users/hp/Picross/picrosspkg")
setwd("C:/Users/hp/Picross")
library(devtools)
library(usethis)
library(devtools)
library(roxygen2)
library(roxygen2)
devtools::build()
install.packages("/chemin/vers/votre/package.tar.gz", repos = NULL, type = "source")
Sys.which("make")
Sys.getenv("RTOOLS40_HOME")
R.version
R.version
library(roxygen2)
library(usethis)
library(usethis)
shiny::runApp('R')
install.packages("shiny")
sessionInfo()
library(shiny)
runApp('R')
install.packages("roxygen2")
